--- gio/gapplication.c	Thu Feb 26 09:54:06 2015
+++ gio/gapplication.c	Fri Feb 27 02:34:27 2015
@@ -2132,7 +2132,8 @@
  * is intended to be returned by main(). Although you are expected to pass
  * the @argc, @argv parameters from main() to this function, it is possible
  * to pass %NULL if @argv is not available or commandline handling is not
- * required.  Note that on Windows, @argc and @argv are ignored, and
+ * required.  Note that on Windows, @argv is ignored, except for
+ * argv[0] (i.e. the program invocation command) and
  * g_win32_get_command_line() is called internally (for proper support
  * of Unicode commandline arguments).
  *
@@ -2214,22 +2215,48 @@
 {
   gchar **arguments;
   int status;
+  gint i;
 
   g_return_val_if_fail (G_IS_APPLICATION (application), 1);
   g_return_val_if_fail (argc == 0 || argv != NULL, 1);
   g_return_val_if_fail (!application->priv->must_quit_now, 1);
 
+  arguments = g_new(gchar *, argc + 1);
+
 #ifdef G_OS_WIN32
-  arguments = g_win32_get_command_line ();
-#else
+  if (argc > 0)
   {
-    gint i;
+      gchar **win32_arguments = g_win32_get_command_line ();
+      gint j;
 
-    arguments = g_new (gchar *, argc + 1);
+      /* We could be calling this via a script that uses GNOME
+         bindings, so the arguments returned from g_win32_get_command_line()
+         may include the invocation command of the script interpreter,
+         which GApplication probably can't cope with, so only start
+         dealing with the arguments returned by g_win32_get_command_line()
+         after the one matching argv[0] */
+      for (i = 0; win32_arguments[i] != NULL; i++)
+
+        /* XXX: What if argv[0] is in Unicode outside of the
+           system codepage, though quite unlikely? */
+        if (g_strcmp0 (win32_arguments[i], argv[0]) == 0)
+          break;
+
+	  g_return_val_if_fail(win32_arguments[i] != NULL, 1);
+
+      for (j = 0; j < argc; j++)
+        arguments[j] = g_strdup (win32_arguments[i + j]);
+      arguments[j] = NULL;
+
+      g_strfreev (win32_arguments);
+    }
+  else
+    /* if argc is 0, don't bother, as done on other platforms */
+    arguments[0] = NULL;
+#else
     for (i = 0; i < argc; i++)
       arguments[i] = g_strdup (argv[i]);
     arguments[i] = NULL;
-  }
 #endif
 
   if (g_get_prgname () == NULL)
--- gio/gdbusaddress.c	Sat Dec 20 04:49:48 2014
+++ gio/gdbusaddress.c	Fri Feb 27 02:34:27 2015
@@ -1383,7 +1383,13 @@
 	  wchar_t gio_path_short[MAX_PATH];
 	  wchar_t rundll_path[MAX_PATH*2];
 	  wchar_t args[MAX_PATH*4];
-
+    wchar_t root[MAX_PATH];
+    wchar_t root_short[MAX_PATH];
+    wchar_t drive[_MAX_DRIVE];
+    wchar_t dir[_MAX_DIR];
+    _wsplitpath(gio_path, drive, dir, NULL, NULL);
+    _wmakepath(root, drive, dir, NULL, NULL);
+    GetShortPathNameW (root, root_short, MAX_PATH);
 	  GetShortPathNameW (gio_path, gio_path_short, MAX_PATH);
 
 	  GetWindowsDirectoryW (rundll_path, MAX_PATH);
@@ -1409,7 +1415,7 @@
 	  res = CreateProcessW (rundll_path, args,
 				0, 0, FALSE,
 				NORMAL_PRIORITY_CLASS | CREATE_NO_WINDOW | DETACHED_PROCESS,
-				0, NULL /* TODO: Should be root */,
+				0, root_short /* Changed to glib directory */,
 				&si, &pi);
 	  if (res)
 	    address = read_shm (DBUS_DAEMON_ADDRESS_INFO);
--- gio/glocalfileinfo.c	Thu Feb 26 09:57:52 2015
+++ gio/glocalfileinfo.c	Fri Feb 27 19:47:56 2015
@@ -1218,9 +1218,9 @@
 {
   if (is_symlink &&
       (symlink_broken || (flags & G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS)))
-    return g_content_type_from_mime_type ("inode/symlink");
+    return g_strdup ("inode/symlink");
   else if (statbuf != NULL && S_ISDIR(statbuf->st_mode))
-    return g_content_type_from_mime_type ("inode/directory");
+    return g_strdup ("inode/directory");
 #ifndef G_OS_WIN32
   else if (statbuf != NULL && S_ISCHR(statbuf->st_mode))
     return g_content_type_from_mime_type ("inode/chardevice");
--- glib/gconvert.c	Sat Dec 20 04:49:48 2014
+++ glib/gconvert.c	Fri Feb 27 02:34:27 2015
@@ -1157,7 +1157,7 @@
 		      "UTF-8", charset, bytes_read, bytes_written, error);
 }
 
-#if defined (G_OS_WIN32) && !defined (_WIN64)
+#ifdef G_OS_WIN32
 
 #undef g_filename_to_utf8
 
@@ -1228,7 +1228,7 @@
 		      charset, "UTF-8", bytes_read, bytes_written, error);
 }
 
-#if defined (G_OS_WIN32) && !defined (_WIN64)
+#ifdef G_OS_WIN32
 
 #undef g_filename_from_utf8
 
@@ -1663,7 +1663,7 @@
   return result;
 }
 
-#if defined (G_OS_WIN32) && !defined (_WIN64)
+#ifdef G_OS_WIN32
 
 #undef g_filename_from_uri
 
@@ -1738,7 +1738,7 @@
   return escaped_uri;
 }
 
-#if defined (G_OS_WIN32) && !defined (_WIN64)
+#ifdef G_OS_WIN32
 
 #undef g_filename_to_uri
 
--- glib/gdir.c	Sat Dec 20 04:49:48 2014
+++ glib/gdir.c	Fri Feb 27 02:34:27 2015
@@ -159,7 +159,7 @@
   return dir;
 }
 
-#if defined (G_OS_WIN32) && !defined (_WIN64)
+#ifdef G_OS_WIN32
 
 /* The above function actually is called g_dir_open_utf8, and it's
  * that what applications compiled with this GLib version will
@@ -293,7 +293,7 @@
 #endif
 }
 
-#if defined (G_OS_WIN32) && !defined (_WIN64)
+#ifdef G_OS_WIN32
 
 /* Ditto for g_dir_read_name */
 
--- glib/genviron.c	Sat Dec 20 04:49:48 2014
+++ glib/genviron.c	Fri Feb 27 02:34:27 2015
@@ -635,7 +635,6 @@
 }
 
 /* Win32 binary compatibility versions {{{1 */
-#ifndef _WIN64
 
 #undef g_getenv
 
@@ -685,8 +684,6 @@
 
   g_free (utf8_variable);
 }
-
-#endif  /* _WIN64 */
 
 #endif  /* G_OS_WIN32 */
 
--- glib/gfileutils.c	Sat Dec 20 04:49:48 2014
+++ glib/gfileutils.c	Fri Feb 27 02:34:27 2015
@@ -2504,7 +2504,7 @@
 /* NOTE : Keep this part last to ensure nothing in this file uses thn
  * below binary compatibility versions.
  */
-#if defined (G_OS_WIN32) && !defined (_WIN64)
+#ifdef G_OS_WIN32
 
 /* Binary compatibility versions. Will be called by code compiled
  * against quite old (pre-2.8, I think) headers only, not from more
--- glib/giowin32.c	Sat Dec 20 04:49:48 2014
+++ glib/giowin32.c	Fri Feb 27 02:34:27 2015
@@ -1742,7 +1742,6 @@
   return channel;
 }
 
-#if !defined (_WIN64)
 
 #undef g_io_channel_new_file
 
@@ -1766,7 +1765,6 @@
   return retval;
 }
 
-#endif
 
 static GIOStatus
 g_io_win32_unimpl_set_flags (GIOChannel *channel,
--- glib/grand.c	Sat Dec 20 04:49:48 2014
+++ glib/grand.c	Fri Feb 27 20:31:57 2015
@@ -263,7 +263,7 @@
     }
 #else /* G_OS_WIN32 */
   /* rand_s() is only available since Visual Studio 2005 */
-#if defined(_MSC_VER) && _MSC_VER >= 1400
+#if (defined(_MSC_VER) && _MSC_VER >= 1400) || (defined (__MINGW64_VERSION_MAJOR) && __MSVCRT_VERSION__>= 0x0800)
   gint i;
 
   for (i = 0; i < G_N_ELEMENTS (seed); i++)
--- glib/gspawn-win32-helper.c	Sat Dec 20 04:49:48 2014
+++ glib/gspawn-win32-helper.c	Tue May 19 19:29:31 2015
@@ -33,7 +33,7 @@
  * Please see http://msdn.microsoft.com/zh-tw/library/ks2530z6%28v=vs.80%29.aspx
  * for an explanation on this.
  */
-#if (defined (_MSC_VER) && _MSC_VER >= 1400)
+#if (defined (_MSC_VER) && _MSC_VER >= 1400) || (defined (__MINGW64_VERSION_MAJOR) && __MSVCRT_VERSION__>= 0x0800)
 #include <crtdbg.h>
 #endif
 
@@ -160,7 +160,7 @@
   return argc;
 }
 
-#if (defined (_MSC_VER) && _MSC_VER >= 1400)
+#if (defined (_MSC_VER) && _MSC_VER >= 1400) || (defined (__MINGW64_VERSION_MAJOR) && __MSVCRT_VERSION__>= 0x0800)
 /*
  * This is the (empty) invalid parameter handler
  * that is used for Visual C++ 2005 (and later) builds
@@ -215,7 +215,7 @@
   _startupinfo si = { 0 };
   char c;
 
-#if (defined (_MSC_VER) && _MSC_VER >= 1400)
+#if (defined (_MSC_VER) && _MSC_VER >= 1400) || (defined (__MINGW64_VERSION_MAJOR) && __MSVCRT_VERSION__>= 0x0800)
   /* set up our empty invalid parameter handler */
   _invalid_parameter_handler oldHandler, newHandler;
   newHandler = myInvalidParameterHandler;
--- glib/gspawn-win32.c	Sat Dec 20 04:49:48 2014
+++ glib/gspawn-win32.c	Fri Feb 27 02:34:27 2015
@@ -1240,8 +1240,6 @@
   return ret;
 }
 
-#if !defined (_WIN64)
-
 /* Binary compatibility versions that take system codepage pathnames,
  * argument vectors and environments. These get used only by code
  * built against 2.8.1 or earlier. Code built against 2.8.2 or later
@@ -1507,6 +1505,5 @@
   return retval;
 }
 
-#endif	/* !_WIN64 */
 
 #endif /* !GSPAWN_HELPER */
--- glib/gutils.c	Sat Dec 20 04:49:48 2014
+++ glib/gutils.c	Fri Feb 27 02:34:27 2015
@@ -2289,7 +2289,7 @@
     }
 }
 
-#if defined (G_OS_WIN32) && !defined (_WIN64)
+#ifdef G_OS_WIN32
 
 /* Binary compatibility versions. Not for newly compiled code. */
 
--- glib/gwin32.c	Thu Feb 26 09:54:06 2015
+++ glib/gwin32.c	Fri Feb 27 02:34:27 2015
@@ -238,44 +238,23 @@
 gchar *
 g_win32_get_package_installation_directory_of_module (gpointer hmodule)
 {
-  gchar *filename;
   gchar *retval;
   gchar *p;
   wchar_t wc_fn[MAX_PATH];
 
-  /* NOTE: it relies that GetModuleFileNameW returns only canonical paths */
   if (!GetModuleFileNameW (hmodule, wc_fn, MAX_PATH))
     return NULL;
 
-  filename = g_utf16_to_utf8 (wc_fn, -1, NULL, NULL, NULL);
+  retval = g_utf16_to_utf8 (wc_fn, -1, NULL, NULL, NULL);
 
-  if ((p = strrchr (filename, G_DIR_SEPARATOR)) != NULL)
+  if ((p = strrchr (retval, G_DIR_SEPARATOR)) != NULL)
     *p = '\0';
 
-  retval = g_strdup (filename);
-
-  do
-    {
       p = strrchr (retval, G_DIR_SEPARATOR);
-      if (p == NULL)
-        break;
-
+  if (p && (g_ascii_strcasecmp (p + 1, "bin") == 0 ||
+	    g_ascii_strcasecmp (p + 1, "lib") == 0))
       *p = '\0';
 
-      if (g_ascii_strcasecmp (p + 1, "bin") == 0 ||
-          g_ascii_strcasecmp (p + 1, "lib") == 0)
-        break;
-    }
-  while (p != NULL);
-
-  if (p == NULL)
-    {
-      g_free (retval);
-      retval = filename;
-    }
-  else
-    g_free (filename);
-
 #ifdef G_WITH_CYGWIN
   /* In Cygwin we need to have POSIX paths */
   {
@@ -413,8 +392,9 @@
   return result;
 }
 
-#if !defined (_WIN64)
+#ifdef G_OS_WIN32
 
+#undef g_win32_get_package_installation_directory
 /* DLL ABI binary compatibility version that uses system codepage file names */
 
 gchar *
@@ -492,7 +472,9 @@
   return dirname;
 }
 
-#if !defined (_WIN64)
+#ifdef G_OS_WIN32
+
+#undef g_win32_get_package_installation_subdirectory
 
 /* DLL ABI binary compatibility version that uses system codepage file names */
 
--- gmodule/gmodule.c	Sat Dec 20 04:49:48 2014
+++ gmodule/gmodule.c	Fri Feb 27 02:34:27 2015
@@ -649,7 +649,7 @@
   return module;
 }
 
-#if defined (G_OS_WIN32) && !defined(_WIN64)
+#ifdef G_OS_WIN32
 
 #undef g_module_open
 
@@ -872,7 +872,7 @@
   return module->file_name;
 }
 
-#if defined (G_OS_WIN32) && !defined(_WIN64)
+#ifdef G_OS_WIN32
 
 #undef g_module_name
 
@@ -883,8 +883,11 @@
   
   if (module == main_module)
     return "main";
-  
+#ifndef _WIN64
   return module->cp_file_name;
+#else
+  return module->file_name;
+#endif
 }
 
 #endif
--- glib/gwin32.h	Thu Feb 26 09:54:06 2015
+++ glib/gwin32.h	Mon Aug 17 21:03:54 2015
@@ -84,7 +84,6 @@
 GLIB_AVAILABLE_IN_ALL
 gchar*          g_win32_error_message (gint error);
 
-#ifndef _WIN64
 GLIB_DEPRECATED
 gchar*          g_win32_get_package_installation_directory (const gchar *package,
 							    const gchar *dll_name);
@@ -93,7 +92,6 @@
 gchar*          g_win32_get_package_installation_subdirectory (const gchar *package,
 							       const gchar *dll_name,
 							       const gchar *subdir);
-#endif
 
 GLIB_AVAILABLE_IN_ALL
 gchar*          g_win32_get_package_installation_directory_of_module (gpointer hmodule);
@@ -116,10 +114,9 @@
 #endif	 /* G_PLATFORM_WIN32 */
 
 #ifdef G_OS_WIN32
-#ifdef _WIN64
+
 #define g_win32_get_package_installation_directory g_win32_get_package_installation_directory_utf8
 #define g_win32_get_package_installation_subdirectory g_win32_get_package_installation_subdirectory_utf8
-#endif
 
 GLIB_AVAILABLE_IN_ALL
 gchar *g_win32_get_package_installation_directory_utf8    (const gchar *package,
